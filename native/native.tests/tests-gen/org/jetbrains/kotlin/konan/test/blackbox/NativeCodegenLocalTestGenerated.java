/*
 * Copyright 2010-2023 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.konan.test.blackbox;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.konan.test.blackbox.support.group.UseExtTestCaseGroupProvider;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.GenerateNativeTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
public class NativeCodegenLocalTestGenerated extends AbstractNativeCodegenBoxTest {
    @Nested
    @TestMetadata("native/native.tests/testData/codegen")
    @TestDataPath("$PROJECT_ROOT")
    @UseExtTestCaseGroupProvider()
    public class Codegen {
        @Test
        public void testAllFilesPresentInCodegen() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/annotations")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Annotations {
            @Test
            public void testAllFilesPresentInAnnotations() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/annotations"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("annotations0.kt")
            public void testAnnotations0() throws Exception {
                runTest("native/native.tests/testData/codegen/annotations/annotations0.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/arithmetic")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Arithmetic {
            @Test
            public void testAllFilesPresentInArithmetic() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/arithmetic"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("basic.kt")
            public void testBasic() throws Exception {
                runTest("native/native.tests/testData/codegen/arithmetic/basic.kt");
            }

            @Test
            @TestMetadata("division.kt")
            public void testDivision() throws Exception {
                runTest("native/native.tests/testData/codegen/arithmetic/division.kt");
            }

            @Test
            @TestMetadata("github1856.kt")
            public void testGithub1856() throws Exception {
                runTest("native/native.tests/testData/codegen/arithmetic/github1856.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/associatedObjects")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class AssociatedObjects {
            @Test
            public void testAllFilesPresentInAssociatedObjects() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/associatedObjects"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("associatedObjects1.kt")
            public void testAssociatedObjects1() throws Exception {
                runTest("native/native.tests/testData/codegen/associatedObjects/associatedObjects1.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/basics")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Basics {
            @Test
            public void testAllFilesPresentInBasics() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/basics"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("array_to_any.kt")
            public void testArray_to_any() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/array_to_any.kt");
            }

            @Test
            @TestMetadata("canonical_name.kt")
            public void testCanonical_name() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/canonical_name.kt");
            }

            @Test
            @TestMetadata("cast_null.kt")
            public void testCast_null() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/cast_null.kt");
            }

            @Test
            @TestMetadata("cast_simple.kt")
            public void testCast_simple() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/cast_simple.kt");
            }

            @Test
            @TestMetadata("check_type.kt")
            public void testCheck_type() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/check_type.kt");
            }

            @Test
            @TestMetadata("companion.kt")
            public void testCompanion() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/companion.kt");
            }

            @Test
            @TestMetadata("concatenation.kt")
            public void testConcatenation() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/concatenation.kt");
            }

            @Test
            @TestMetadata("const_infinity.kt")
            public void testConst_infinity() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/const_infinity.kt");
            }

            @Test
            @TestMetadata("expression_as_statement.kt")
            public void testExpression_as_statement() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/expression_as_statement.kt");
            }

            @Test
            @TestMetadata("k42000_1.kt")
            public void testK42000_1() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/k42000_1.kt");
            }

            @Test
            @TestMetadata("k42000_2.kt")
            public void testK42000_2() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/k42000_2.kt");
            }

            @Test
            @TestMetadata("local_variable.kt")
            public void testLocal_variable() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/local_variable.kt");
            }

            @Test
            @TestMetadata("null_check.kt")
            public void testNull_check() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/null_check.kt");
            }

            @Test
            @TestMetadata("safe_cast.kt")
            public void testSafe_cast() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/safe_cast.kt");
            }

            @Test
            @TestMetadata("spread_operator_0.kt")
            public void testSpread_operator_0() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/spread_operator_0.kt");
            }

            @Test
            @TestMetadata("superFunCall.kt")
            public void testSuperFunCall() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/superFunCall.kt");
            }

            @Test
            @TestMetadata("superGetterCall.kt")
            public void testSuperGetterCall() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/superGetterCall.kt");
            }

            @Test
            @TestMetadata("superSetterCall.kt")
            public void testSuperSetterCall() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/superSetterCall.kt");
            }

            @Test
            @TestMetadata("typealias1.kt")
            public void testTypealias1() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/typealias1.kt");
            }

            @Test
            @TestMetadata("unchecked_cast1.kt")
            public void testUnchecked_cast1() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/unchecked_cast1.kt");
            }

            @Test
            @TestMetadata("unchecked_cast2.kt")
            public void testUnchecked_cast2() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/unchecked_cast2.kt");
            }

            @Test
            @TestMetadata("unchecked_cast3.kt")
            public void testUnchecked_cast3() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/unchecked_cast3.kt");
            }

            @Test
            @TestMetadata("unchecked_cast4.kt")
            public void testUnchecked_cast4() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/unchecked_cast4.kt");
            }

            @Test
            @TestMetadata("unit1.kt")
            public void testUnit1() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/unit1.kt");
            }

            @Test
            @TestMetadata("unit2.kt")
            public void testUnit2() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/unit2.kt");
            }

            @Test
            @TestMetadata("unit3.kt")
            public void testUnit3() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/unit3.kt");
            }

            @Test
            @TestMetadata("unit4.kt")
            public void testUnit4() throws Exception {
                runTest("native/native.tests/testData/codegen/basics/unit4.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/bce")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Bce {
            @Test
            public void testAllFilesPresentInBce() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/bce"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("arraysForLoops.kt")
            public void testArraysForLoops() throws Exception {
                runTest("native/native.tests/testData/codegen/bce/arraysForLoops.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/boxing")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Boxing {
            @Test
            public void testAllFilesPresentInBoxing() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/boxing"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("box_cache0.kt")
            public void testBox_cache0() throws Exception {
                runTest("native/native.tests/testData/codegen/boxing/box_cache0.kt");
            }

            @Test
            @TestMetadata("boxing0.kt")
            public void testBoxing0() throws Exception {
                runTest("native/native.tests/testData/codegen/boxing/boxing0.kt");
            }

            @Test
            @TestMetadata("boxing1.kt")
            public void testBoxing1() throws Exception {
                runTest("native/native.tests/testData/codegen/boxing/boxing1.kt");
            }

            @Test
            @TestMetadata("boxing10.kt")
            public void testBoxing10() throws Exception {
                runTest("native/native.tests/testData/codegen/boxing/boxing10.kt");
            }

            @Test
            @TestMetadata("boxing11.kt")
            public void testBoxing11() throws Exception {
                runTest("native/native.tests/testData/codegen/boxing/boxing11.kt");
            }

            @Test
            @TestMetadata("boxing12.kt")
            public void testBoxing12() throws Exception {
                runTest("native/native.tests/testData/codegen/boxing/boxing12.kt");
            }

            @Test
            @TestMetadata("boxing13.kt")
            public void testBoxing13() throws Exception {
                runTest("native/native.tests/testData/codegen/boxing/boxing13.kt");
            }

            @Test
            @TestMetadata("boxing14.kt")
            public void testBoxing14() throws Exception {
                runTest("native/native.tests/testData/codegen/boxing/boxing14.kt");
            }

            @Test
            @TestMetadata("boxing15.kt")
            public void testBoxing15() throws Exception {
                runTest("native/native.tests/testData/codegen/boxing/boxing15.kt");
            }

            @Test
            @TestMetadata("boxing2.kt")
            public void testBoxing2() throws Exception {
                runTest("native/native.tests/testData/codegen/boxing/boxing2.kt");
            }

            @Test
            @TestMetadata("boxing3.kt")
            public void testBoxing3() throws Exception {
                runTest("native/native.tests/testData/codegen/boxing/boxing3.kt");
            }

            @Test
            @TestMetadata("boxing4.kt")
            public void testBoxing4() throws Exception {
                runTest("native/native.tests/testData/codegen/boxing/boxing4.kt");
            }

            @Test
            @TestMetadata("boxing5.kt")
            public void testBoxing5() throws Exception {
                runTest("native/native.tests/testData/codegen/boxing/boxing5.kt");
            }

            @Test
            @TestMetadata("boxing6.kt")
            public void testBoxing6() throws Exception {
                runTest("native/native.tests/testData/codegen/boxing/boxing6.kt");
            }

            @Test
            @TestMetadata("boxing7.kt")
            public void testBoxing7() throws Exception {
                runTest("native/native.tests/testData/codegen/boxing/boxing7.kt");
            }

            @Test
            @TestMetadata("boxing8.kt")
            public void testBoxing8() throws Exception {
                runTest("native/native.tests/testData/codegen/boxing/boxing8.kt");
            }

            @Test
            @TestMetadata("boxing9.kt")
            public void testBoxing9() throws Exception {
                runTest("native/native.tests/testData/codegen/boxing/boxing9.kt");
            }

            @Test
            @TestMetadata("kt53100_casts.kt")
            public void testKt53100_casts() throws Exception {
                runTest("native/native.tests/testData/codegen/boxing/kt53100_casts.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/branching")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Branching {
            @Test
            @TestMetadata("advanced_when2.kt")
            public void testAdvanced_when2() throws Exception {
                runTest("native/native.tests/testData/codegen/branching/advanced_when2.kt");
            }

            @Test
            @TestMetadata("advanced_when5.kt")
            public void testAdvanced_when5() throws Exception {
                runTest("native/native.tests/testData/codegen/branching/advanced_when5.kt");
            }

            @Test
            public void testAllFilesPresentInBranching() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/branching"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("if_else.kt")
            public void testIf_else() throws Exception {
                runTest("native/native.tests/testData/codegen/branching/if_else.kt");
            }

            @Test
            @TestMetadata("when2.kt")
            public void testWhen2() throws Exception {
                runTest("native/native.tests/testData/codegen/branching/when2.kt");
            }

            @Test
            @TestMetadata("when4.kt")
            public void testWhen4() throws Exception {
                runTest("native/native.tests/testData/codegen/branching/when4.kt");
            }

            @Test
            @TestMetadata("when5.kt")
            public void testWhen5() throws Exception {
                runTest("native/native.tests/testData/codegen/branching/when5.kt");
            }

            @Test
            @TestMetadata("when6.kt")
            public void testWhen6() throws Exception {
                runTest("native/native.tests/testData/codegen/branching/when6.kt");
            }

            @Test
            @TestMetadata("when7.kt")
            public void testWhen7() throws Exception {
                runTest("native/native.tests/testData/codegen/branching/when7.kt");
            }

            @Test
            @TestMetadata("when8.kt")
            public void testWhen8() throws Exception {
                runTest("native/native.tests/testData/codegen/branching/when8.kt");
            }

            @Test
            @TestMetadata("when9.kt")
            public void testWhen9() throws Exception {
                runTest("native/native.tests/testData/codegen/branching/when9.kt");
            }

            @Test
            @TestMetadata("when_through.kt")
            public void testWhen_through() throws Exception {
                runTest("native/native.tests/testData/codegen/branching/when_through.kt");
            }

            @Test
            @TestMetadata("when_with_try1.kt")
            public void testWhen_with_try1() throws Exception {
                runTest("native/native.tests/testData/codegen/branching/when_with_try1.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/bridges")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Bridges {
            @Test
            public void testAllFilesPresentInBridges() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/bridges"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("nativePointed.kt")
            public void testNativePointed() throws Exception {
                runTest("native/native.tests/testData/codegen/bridges/nativePointed.kt");
            }

            @Test
            @TestMetadata("returnTypeSignature.kt")
            public void testReturnTypeSignature() throws Exception {
                runTest("native/native.tests/testData/codegen/bridges/returnTypeSignature.kt");
            }

            @Test
            @TestMetadata("special.kt")
            public void testSpecial() throws Exception {
                runTest("native/native.tests/testData/codegen/bridges/special.kt");
            }

            @Test
            @TestMetadata("specialGeneric.kt")
            public void testSpecialGeneric() throws Exception {
                runTest("native/native.tests/testData/codegen/bridges/specialGeneric.kt");
            }

            @Test
            @TestMetadata("test0.kt")
            public void testTest0() throws Exception {
                runTest("native/native.tests/testData/codegen/bridges/test0.kt");
            }

            @Test
            @TestMetadata("test1.kt")
            public void testTest1() throws Exception {
                runTest("native/native.tests/testData/codegen/bridges/test1.kt");
            }

            @Test
            @TestMetadata("test10.kt")
            public void testTest10() throws Exception {
                runTest("native/native.tests/testData/codegen/bridges/test10.kt");
            }

            @Test
            @TestMetadata("test11.kt")
            public void testTest11() throws Exception {
                runTest("native/native.tests/testData/codegen/bridges/test11.kt");
            }

            @Test
            @TestMetadata("test12.kt")
            public void testTest12() throws Exception {
                runTest("native/native.tests/testData/codegen/bridges/test12.kt");
            }

            @Test
            @TestMetadata("test13.kt")
            public void testTest13() throws Exception {
                runTest("native/native.tests/testData/codegen/bridges/test13.kt");
            }

            @Test
            @TestMetadata("test14.kt")
            public void testTest14() throws Exception {
                runTest("native/native.tests/testData/codegen/bridges/test14.kt");
            }

            @Test
            @TestMetadata("test15.kt")
            public void testTest15() throws Exception {
                runTest("native/native.tests/testData/codegen/bridges/test15.kt");
            }

            @Test
            @TestMetadata("test16.kt")
            public void testTest16() throws Exception {
                runTest("native/native.tests/testData/codegen/bridges/test16.kt");
            }

            @Test
            @TestMetadata("test17.kt")
            public void testTest17() throws Exception {
                runTest("native/native.tests/testData/codegen/bridges/test17.kt");
            }

            @Test
            @TestMetadata("test18.kt")
            public void testTest18() throws Exception {
                runTest("native/native.tests/testData/codegen/bridges/test18.kt");
            }

            @Test
            @TestMetadata("test2.kt")
            public void testTest2() throws Exception {
                runTest("native/native.tests/testData/codegen/bridges/test2.kt");
            }

            @Test
            @TestMetadata("test3.kt")
            public void testTest3() throws Exception {
                runTest("native/native.tests/testData/codegen/bridges/test3.kt");
            }

            @Test
            @TestMetadata("test4.kt")
            public void testTest4() throws Exception {
                runTest("native/native.tests/testData/codegen/bridges/test4.kt");
            }

            @Test
            @TestMetadata("test5.kt")
            public void testTest5() throws Exception {
                runTest("native/native.tests/testData/codegen/bridges/test5.kt");
            }

            @Test
            @TestMetadata("test6.kt")
            public void testTest6() throws Exception {
                runTest("native/native.tests/testData/codegen/bridges/test6.kt");
            }

            @Test
            @TestMetadata("test7.kt")
            public void testTest7() throws Exception {
                runTest("native/native.tests/testData/codegen/bridges/test7.kt");
            }

            @Test
            @TestMetadata("test8.kt")
            public void testTest8() throws Exception {
                runTest("native/native.tests/testData/codegen/bridges/test8.kt");
            }

            @Test
            @TestMetadata("test9.kt")
            public void testTest9() throws Exception {
                runTest("native/native.tests/testData/codegen/bridges/test9.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/classDelegation")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class ClassDelegation {
            @Test
            public void testAllFilesPresentInClassDelegation() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/classDelegation"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("generic.kt")
            public void testGeneric() throws Exception {
                runTest("native/native.tests/testData/codegen/classDelegation/generic.kt");
            }

            @Test
            @TestMetadata("method.kt")
            public void testMethod() throws Exception {
                runTest("native/native.tests/testData/codegen/classDelegation/method.kt");
            }

            @Test
            @TestMetadata("property.kt")
            public void testProperty() throws Exception {
                runTest("native/native.tests/testData/codegen/classDelegation/property.kt");
            }

            @Test
            @TestMetadata("withBridge.kt")
            public void testWithBridge() throws Exception {
                runTest("native/native.tests/testData/codegen/classDelegation/withBridge.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/contracts")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Contracts {
            @Test
            public void testAllFilesPresentInContracts() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/contracts"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("contracts.kt")
            public void testContracts() throws Exception {
                runTest("native/native.tests/testData/codegen/contracts/contracts.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/controlflow")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Controlflow {
            @Test
            public void testAllFilesPresentInControlflow() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/controlflow"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("break.kt")
            public void testBreak() throws Exception {
                runTest("native/native.tests/testData/codegen/controlflow/break.kt");
            }

            @Test
            @TestMetadata("break1.kt")
            public void testBreak1() throws Exception {
                runTest("native/native.tests/testData/codegen/controlflow/break1.kt");
            }

            @Test
            @TestMetadata("for_loops.kt")
            public void testFor_loops() throws Exception {
                runTest("native/native.tests/testData/codegen/controlflow/for_loops.kt");
            }

            @Test
            @TestMetadata("for_loops_array.kt")
            public void testFor_loops_array() throws Exception {
                runTest("native/native.tests/testData/codegen/controlflow/for_loops_array.kt");
            }

            @Test
            @TestMetadata("for_loops_array_break_continue.kt")
            public void testFor_loops_array_break_continue() throws Exception {
                runTest("native/native.tests/testData/codegen/controlflow/for_loops_array_break_continue.kt");
            }

            @Test
            @TestMetadata("for_loops_array_indices.kt")
            public void testFor_loops_array_indices() throws Exception {
                runTest("native/native.tests/testData/codegen/controlflow/for_loops_array_indices.kt");
            }

            @Test
            @TestMetadata("for_loops_array_mutation.kt")
            public void testFor_loops_array_mutation() throws Exception {
                runTest("native/native.tests/testData/codegen/controlflow/for_loops_array_mutation.kt");
            }

            @Test
            @TestMetadata("for_loops_array_nested.kt")
            public void testFor_loops_array_nested() throws Exception {
                runTest("native/native.tests/testData/codegen/controlflow/for_loops_array_nested.kt");
            }

            @Test
            @TestMetadata("for_loops_array_nullable.kt")
            public void testFor_loops_array_nullable() throws Exception {
                runTest("native/native.tests/testData/codegen/controlflow/for_loops_array_nullable.kt");
            }

            @Test
            @TestMetadata("for_loops_array_side_effects.kt")
            public void testFor_loops_array_side_effects() throws Exception {
                runTest("native/native.tests/testData/codegen/controlflow/for_loops_array_side_effects.kt");
            }

            @Test
            @TestMetadata("for_loops_call_order.kt")
            public void testFor_loops_call_order() throws Exception {
                runTest("native/native.tests/testData/codegen/controlflow/for_loops_call_order.kt");
            }

            @Test
            @TestMetadata("for_loops_coroutines.kt")
            public void testFor_loops_coroutines() throws Exception {
                runTest("native/native.tests/testData/codegen/controlflow/for_loops_coroutines.kt");
            }

            @Test
            @TestMetadata("for_loops_empty_range.kt")
            public void testFor_loops_empty_range() throws Exception {
                runTest("native/native.tests/testData/codegen/controlflow/for_loops_empty_range.kt");
            }

            @Test
            @TestMetadata("for_loops_errors.kt")
            public void testFor_loops_errors() throws Exception {
                runTest("native/native.tests/testData/codegen/controlflow/for_loops_errors.kt");
            }

            @Test
            @TestMetadata("for_loops_let_with_nullable.kt")
            public void testFor_loops_let_with_nullable() throws Exception {
                runTest("native/native.tests/testData/codegen/controlflow/for_loops_let_with_nullable.kt");
            }

            @Test
            @TestMetadata("for_loops_nested.kt")
            public void testFor_loops_nested() throws Exception {
                runTest("native/native.tests/testData/codegen/controlflow/for_loops_nested.kt");
            }

            @Test
            @TestMetadata("for_loops_overflow.kt")
            public void testFor_loops_overflow() throws Exception {
                runTest("native/native.tests/testData/codegen/controlflow/for_loops_overflow.kt");
            }

            @Test
            @TestMetadata("for_loops_types.kt")
            public void testFor_loops_types() throws Exception {
                runTest("native/native.tests/testData/codegen/controlflow/for_loops_types.kt");
            }

            @Test
            @TestMetadata("unreachable1.kt")
            public void testUnreachable1() throws Exception {
                runTest("native/native.tests/testData/codegen/controlflow/unreachable1.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/coroutines")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Coroutines {
            @Test
            public void testAllFilesPresentInCoroutines() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/coroutines"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("anonymousObject.kt")
            public void testAnonymousObject() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/anonymousObject.kt");
            }

            @Test
            @TestMetadata("controlFlow_chain.kt")
            public void testControlFlow_chain() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/controlFlow_chain.kt");
            }

            @Test
            @TestMetadata("controlFlow_finally1.kt")
            public void testControlFlow_finally1() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/controlFlow_finally1.kt");
            }

            @Test
            @TestMetadata("controlFlow_finally2.kt")
            public void testControlFlow_finally2() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/controlFlow_finally2.kt");
            }

            @Test
            @TestMetadata("controlFlow_finally3.kt")
            public void testControlFlow_finally3() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/controlFlow_finally3.kt");
            }

            @Test
            @TestMetadata("controlFlow_finally4.kt")
            public void testControlFlow_finally4() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/controlFlow_finally4.kt");
            }

            @Test
            @TestMetadata("controlFlow_finally5.kt")
            public void testControlFlow_finally5() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/controlFlow_finally5.kt");
            }

            @Test
            @TestMetadata("controlFlow_finally6.kt")
            public void testControlFlow_finally6() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/controlFlow_finally6.kt");
            }

            @Test
            @TestMetadata("controlFlow_finally7.kt")
            public void testControlFlow_finally7() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/controlFlow_finally7.kt");
            }

            @Test
            @TestMetadata("controlFlow_if1.kt")
            public void testControlFlow_if1() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/controlFlow_if1.kt");
            }

            @Test
            @TestMetadata("controlFlow_if2.kt")
            public void testControlFlow_if2() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/controlFlow_if2.kt");
            }

            @Test
            @TestMetadata("controlFlow_inline1.kt")
            public void testControlFlow_inline1() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/controlFlow_inline1.kt");
            }

            @Test
            @TestMetadata("controlFlow_inline2.kt")
            public void testControlFlow_inline2() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/controlFlow_inline2.kt");
            }

            @Test
            @TestMetadata("controlFlow_inline3.kt")
            public void testControlFlow_inline3() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/controlFlow_inline3.kt");
            }

            @Test
            @TestMetadata("controlFlow_tryCatch1.kt")
            public void testControlFlow_tryCatch1() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/controlFlow_tryCatch1.kt");
            }

            @Test
            @TestMetadata("controlFlow_tryCatch2.kt")
            public void testControlFlow_tryCatch2() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/controlFlow_tryCatch2.kt");
            }

            @Test
            @TestMetadata("controlFlow_tryCatch3.kt")
            public void testControlFlow_tryCatch3() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/controlFlow_tryCatch3.kt");
            }

            @Test
            @TestMetadata("controlFlow_tryCatch4.kt")
            public void testControlFlow_tryCatch4() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/controlFlow_tryCatch4.kt");
            }

            @Test
            @TestMetadata("controlFlow_tryCatch5.kt")
            public void testControlFlow_tryCatch5() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/controlFlow_tryCatch5.kt");
            }

            @Test
            @TestMetadata("controlFlow_while1.kt")
            public void testControlFlow_while1() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/controlFlow_while1.kt");
            }

            @Test
            @TestMetadata("controlFlow_while2.kt")
            public void testControlFlow_while2() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/controlFlow_while2.kt");
            }

            @Test
            @TestMetadata("coroutineContext1.kt")
            public void testCoroutineContext1() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/coroutineContext1.kt");
            }

            @Test
            @TestMetadata("coroutineContext2.kt")
            public void testCoroutineContext2() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/coroutineContext2.kt");
            }

            @Test
            @TestMetadata("correctOrder1.kt")
            public void testCorrectOrder1() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/correctOrder1.kt");
            }

            @Test
            @TestMetadata("degenerate1.kt")
            public void testDegenerate1() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/degenerate1.kt");
            }

            @Test
            @TestMetadata("degenerate2.kt")
            public void testDegenerate2() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/degenerate2.kt");
            }

            @Test
            @TestMetadata("functionReference_eqeq_name.kt")
            public void testFunctionReference_eqeq_name() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/functionReference_eqeq_name.kt");
            }

            @Test
            @TestMetadata("functionReference_invokeAsFunction.kt")
            public void testFunctionReference_invokeAsFunction() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/functionReference_invokeAsFunction.kt");
            }

            @Test
            @TestMetadata("functionReference_lambdaAsSuspendLambda.kt")
            public void testFunctionReference_lambdaAsSuspendLambda() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/functionReference_lambdaAsSuspendLambda.kt");
            }

            @Test
            @TestMetadata("functionReference_simple.kt")
            public void testFunctionReference_simple() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/functionReference_simple.kt");
            }

            @Test
            @TestMetadata("inheritance.kt")
            public void testInheritance() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/inheritance.kt");
            }

            @Test
            @TestMetadata("kt41394.kt")
            public void testKt41394() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/kt41394.kt");
            }

            @Test
            @TestMetadata("returnsNothing1.kt")
            public void testReturnsNothing1() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/returnsNothing1.kt");
            }

            @Test
            @TestMetadata("returnsUnit1.kt")
            public void testReturnsUnit1() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/returnsUnit1.kt");
            }

            @Test
            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/simple.kt");
            }

            @Test
            @TestMetadata("suspendConversion.kt")
            public void testSuspendConversion() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/suspendConversion.kt");
            }

            @Test
            @TestMetadata("withReceiver.kt")
            public void testWithReceiver() throws Exception {
                runTest("native/native.tests/testData/codegen/coroutines/withReceiver.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/cycles")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Cycles {
            @Test
            public void testAllFilesPresentInCycles() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/cycles"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("cycle.kt")
            public void testCycle() throws Exception {
                runTest("native/native.tests/testData/codegen/cycles/cycle.kt");
            }

            @Test
            @TestMetadata("cycle_do.kt")
            public void testCycle_do() throws Exception {
                runTest("native/native.tests/testData/codegen/cycles/cycle_do.kt");
            }

            @Test
            @TestMetadata("cycle_for.kt")
            public void testCycle_for() throws Exception {
                runTest("native/native.tests/testData/codegen/cycles/cycle_for.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/dataflow")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Dataflow {
            @Test
            public void testAllFilesPresentInDataflow() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/dataflow"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("scope1.kt")
            public void testScope1() throws Exception {
                runTest("native/native.tests/testData/codegen/dataflow/scope1.kt");
            }

            @Test
            @TestMetadata("uninitialized_val.kt")
            public void testUninitialized_val() throws Exception {
                runTest("native/native.tests/testData/codegen/dataflow/uninitialized_val.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/delegatedProperty")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class DelegatedProperty {
            @Test
            public void testAllFilesPresentInDelegatedProperty() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/delegatedProperty"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("lazy.kt")
            public void testLazy() throws Exception {
                runTest("native/native.tests/testData/codegen/delegatedProperty/lazy.kt");
            }

            @Test
            @TestMetadata("local.kt")
            public void testLocal() throws Exception {
                runTest("native/native.tests/testData/codegen/delegatedProperty/local.kt");
            }

            @Test
            @TestMetadata("map.kt")
            public void testMap() throws Exception {
                runTest("native/native.tests/testData/codegen/delegatedProperty/map.kt");
            }

            @Test
            @TestMetadata("observable.kt")
            public void testObservable() throws Exception {
                runTest("native/native.tests/testData/codegen/delegatedProperty/observable.kt");
            }

            @Test
            @TestMetadata("packageLevel.kt")
            public void testPackageLevel() throws Exception {
                runTest("native/native.tests/testData/codegen/delegatedProperty/packageLevel.kt");
            }

            @Test
            @TestMetadata("simpleVal.kt")
            public void testSimpleVal() throws Exception {
                runTest("native/native.tests/testData/codegen/delegatedProperty/simpleVal.kt");
            }

            @Test
            @TestMetadata("simpleVar.kt")
            public void testSimpleVar() throws Exception {
                runTest("native/native.tests/testData/codegen/delegatedProperty/simpleVar.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/devirtualization")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Devirtualization {
            @Test
            public void testAllFilesPresentInDevirtualization() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/devirtualization"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("anonymousObject.kt")
            public void testAnonymousObject() throws Exception {
                runTest("native/native.tests/testData/codegen/devirtualization/anonymousObject.kt");
            }

            @Test
            @TestMetadata("getter_looking_as_box_function.kt")
            public void testGetter_looking_as_box_function() throws Exception {
                runTest("native/native.tests/testData/codegen/devirtualization/getter_looking_as_box_function.kt");
            }

            @Test
            @TestMetadata("inline_getter.kt")
            public void testInline_getter() throws Exception {
                runTest("native/native.tests/testData/codegen/devirtualization/inline_getter.kt");
            }

            @Test
            @TestMetadata("lateinitInterface.kt")
            public void testLateinitInterface() throws Exception {
                runTest("native/native.tests/testData/codegen/devirtualization/lateinitInterface.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/enum")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Enum {
            @Test
            public void testAllFilesPresentInEnum() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/enum"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("companionObject.kt")
            public void testCompanionObject() throws Exception {
                runTest("native/native.tests/testData/codegen/enum/companionObject.kt");
            }

            @Test
            @TestMetadata("interfaceCallNoEntryClass.kt")
            public void testInterfaceCallNoEntryClass() throws Exception {
                runTest("native/native.tests/testData/codegen/enum/interfaceCallNoEntryClass.kt");
            }

            @Test
            @TestMetadata("interfaceCallWithEntryClass.kt")
            public void testInterfaceCallWithEntryClass() throws Exception {
                runTest("native/native.tests/testData/codegen/enum/interfaceCallWithEntryClass.kt");
            }

            @Test
            @TestMetadata("isFrozen.kt")
            public void testIsFrozen() throws Exception {
                runTest("native/native.tests/testData/codegen/enum/isFrozen.kt");
            }

            @Test
            @TestMetadata("kt38540.kt")
            public void testKt38540() throws Exception {
                runTest("native/native.tests/testData/codegen/enum/kt38540.kt");
            }

            @Test
            @TestMetadata("lambdaInDefault.kt")
            public void testLambdaInDefault() throws Exception {
                runTest("native/native.tests/testData/codegen/enum/lambdaInDefault.kt");
            }

            @Test
            @TestMetadata("loop.kt")
            public void testLoop() throws Exception {
                runTest("native/native.tests/testData/codegen/enum/loop.kt");
            }

            @Test
            @TestMetadata("nested.kt")
            public void testNested() throws Exception {
                runTest("native/native.tests/testData/codegen/enum/nested.kt");
            }

            @Test
            @TestMetadata("reorderedArguments.kt")
            public void testReorderedArguments() throws Exception {
                runTest("native/native.tests/testData/codegen/enum/reorderedArguments.kt");
            }

            @Test
            @TestMetadata("switchLowering.kt")
            public void testSwitchLowering() throws Exception {
                runTest("native/native.tests/testData/codegen/enum/switchLowering.kt");
            }

            @Test
            @TestMetadata("test0.kt")
            public void testTest0() throws Exception {
                runTest("native/native.tests/testData/codegen/enum/test0.kt");
            }

            @Test
            @TestMetadata("test1.kt")
            public void testTest1() throws Exception {
                runTest("native/native.tests/testData/codegen/enum/test1.kt");
            }

            @Test
            @TestMetadata("vCallNoEntryClass.kt")
            public void testVCallNoEntryClass() throws Exception {
                runTest("native/native.tests/testData/codegen/enum/vCallNoEntryClass.kt");
            }

            @Test
            @TestMetadata("vCallWithEntryClass.kt")
            public void testVCallWithEntryClass() throws Exception {
                runTest("native/native.tests/testData/codegen/enum/vCallWithEntryClass.kt");
            }

            @Test
            @TestMetadata("valueOf.kt")
            public void testValueOf() throws Exception {
                runTest("native/native.tests/testData/codegen/enum/valueOf.kt");
            }

            @Test
            @TestMetadata("values.kt")
            public void testValues() throws Exception {
                runTest("native/native.tests/testData/codegen/enum/values.kt");
            }

            @Test
            @TestMetadata("varargParam.kt")
            public void testVarargParam() throws Exception {
                runTest("native/native.tests/testData/codegen/enum/varargParam.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/escapeAnalysis")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class EscapeAnalysis {
            @Test
            public void testAllFilesPresentInEscapeAnalysis() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/escapeAnalysis"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("negativeArraySize.kt")
            public void testNegativeArraySize() throws Exception {
                runTest("native/native.tests/testData/codegen/escapeAnalysis/negativeArraySize.kt");
            }

            @Test
            @TestMetadata("recursion.kt")
            public void testRecursion() throws Exception {
                runTest("native/native.tests/testData/codegen/escapeAnalysis/recursion.kt");
            }

            @Test
            @TestMetadata("stackAllocated.kt")
            public void testStackAllocated() throws Exception {
                runTest("native/native.tests/testData/codegen/escapeAnalysis/stackAllocated.kt");
            }

            @Test
            @TestMetadata("stackAllocatedString.kt")
            public void testStackAllocatedString() throws Exception {
                runTest("native/native.tests/testData/codegen/escapeAnalysis/stackAllocatedString.kt");
            }

            @Test
            @TestMetadata("stackNotAllocated.kt")
            public void testStackNotAllocated() throws Exception {
                runTest("native/native.tests/testData/codegen/escapeAnalysis/stackNotAllocated.kt");
            }

            @Test
            @TestMetadata("stackNotAllocatedString.kt")
            public void testStackNotAllocatedString() throws Exception {
                runTest("native/native.tests/testData/codegen/escapeAnalysis/stackNotAllocatedString.kt");
            }

            @Test
            @TestMetadata("stack_array.kt")
            public void testStack_array() throws Exception {
                runTest("native/native.tests/testData/codegen/escapeAnalysis/stack_array.kt");
            }

            @Test
            @TestMetadata("test1.kt")
            public void testTest1() throws Exception {
                runTest("native/native.tests/testData/codegen/escapeAnalysis/test1.kt");
            }

            @Test
            @TestMetadata("test10.kt")
            public void testTest10() throws Exception {
                runTest("native/native.tests/testData/codegen/escapeAnalysis/test10.kt");
            }

            @Test
            @TestMetadata("test11.kt")
            public void testTest11() throws Exception {
                runTest("native/native.tests/testData/codegen/escapeAnalysis/test11.kt");
            }

            @Test
            @TestMetadata("test12.kt")
            public void testTest12() throws Exception {
                runTest("native/native.tests/testData/codegen/escapeAnalysis/test12.kt");
            }

            @Test
            @TestMetadata("test13.kt")
            public void testTest13() throws Exception {
                runTest("native/native.tests/testData/codegen/escapeAnalysis/test13.kt");
            }

            @Test
            @TestMetadata("test2.kt")
            public void testTest2() throws Exception {
                runTest("native/native.tests/testData/codegen/escapeAnalysis/test2.kt");
            }

            @Test
            @TestMetadata("test3.kt")
            public void testTest3() throws Exception {
                runTest("native/native.tests/testData/codegen/escapeAnalysis/test3.kt");
            }

            @Test
            @TestMetadata("test4.kt")
            public void testTest4() throws Exception {
                runTest("native/native.tests/testData/codegen/escapeAnalysis/test4.kt");
            }

            @Test
            @TestMetadata("test5.kt")
            public void testTest5() throws Exception {
                runTest("native/native.tests/testData/codegen/escapeAnalysis/test5.kt");
            }

            @Test
            @TestMetadata("test6.kt")
            public void testTest6() throws Exception {
                runTest("native/native.tests/testData/codegen/escapeAnalysis/test6.kt");
            }

            @Test
            @TestMetadata("test7.kt")
            public void testTest7() throws Exception {
                runTest("native/native.tests/testData/codegen/escapeAnalysis/test7.kt");
            }

            @Test
            @TestMetadata("test8.kt")
            public void testTest8() throws Exception {
                runTest("native/native.tests/testData/codegen/escapeAnalysis/test8.kt");
            }

            @Test
            @TestMetadata("test9.kt")
            public void testTest9() throws Exception {
                runTest("native/native.tests/testData/codegen/escapeAnalysis/test9.kt");
            }

            @Test
            @TestMetadata("zeroOutObjectOnAlloc.kt")
            public void testZeroOutObjectOnAlloc() throws Exception {
                runTest("native/native.tests/testData/codegen/escapeAnalysis/zeroOutObjectOnAlloc.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/funInterface")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class FunInterface {
            @Test
            public void testAllFilesPresentInFunInterface() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/funInterface"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("implIsNotFunction.kt")
            public void testImplIsNotFunction() throws Exception {
                runTest("native/native.tests/testData/codegen/funInterface/implIsNotFunction.kt");
            }

            @Test
            @TestMetadata("kt43887.kt")
            public void testKt43887() throws Exception {
                runTest("native/native.tests/testData/codegen/funInterface/kt43887.kt");
            }

            @Test
            @TestMetadata("kt49384.kt")
            public void testKt49384() throws Exception {
                runTest("native/native.tests/testData/codegen/funInterface/kt49384.kt");
            }

            @Test
            @TestMetadata("nonTrivialProjectionInSuperType.kt")
            public void testNonTrivialProjectionInSuperType() throws Exception {
                runTest("native/native.tests/testData/codegen/funInterface/nonTrivialProjectionInSuperType.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/function")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Function {
            @Test
            public void testAllFilesPresentInFunction() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/function"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("arithmetic.kt")
            public void testArithmetic() throws Exception {
                runTest("native/native.tests/testData/codegen/function/arithmetic.kt");
            }

            @Test
            @TestMetadata("boolean.kt")
            public void testBoolean() throws Exception {
                runTest("native/native.tests/testData/codegen/function/boolean.kt");
            }

            @Test
            @TestMetadata("defaults.kt")
            public void testDefaults() throws Exception {
                runTest("native/native.tests/testData/codegen/function/defaults.kt");
            }

            @Test
            @TestMetadata("defaults1.kt")
            public void testDefaults1() throws Exception {
                runTest("native/native.tests/testData/codegen/function/defaults1.kt");
            }

            @Test
            @TestMetadata("defaults10.kt")
            public void testDefaults10() throws Exception {
                runTest("native/native.tests/testData/codegen/function/defaults10.kt");
            }

            @Test
            @TestMetadata("defaults2.kt")
            public void testDefaults2() throws Exception {
                runTest("native/native.tests/testData/codegen/function/defaults2.kt");
            }

            @Test
            @TestMetadata("defaults3.kt")
            public void testDefaults3() throws Exception {
                runTest("native/native.tests/testData/codegen/function/defaults3.kt");
            }

            @Test
            @TestMetadata("defaults4.kt")
            public void testDefaults4() throws Exception {
                runTest("native/native.tests/testData/codegen/function/defaults4.kt");
            }

            @Test
            @TestMetadata("defaults5.kt")
            public void testDefaults5() throws Exception {
                runTest("native/native.tests/testData/codegen/function/defaults5.kt");
            }

            @Test
            @TestMetadata("defaults6.kt")
            public void testDefaults6() throws Exception {
                runTest("native/native.tests/testData/codegen/function/defaults6.kt");
            }

            @Test
            @TestMetadata("defaults7.kt")
            public void testDefaults7() throws Exception {
                runTest("native/native.tests/testData/codegen/function/defaults7.kt");
            }

            @Test
            @TestMetadata("defaults8.kt")
            public void testDefaults8() throws Exception {
                runTest("native/native.tests/testData/codegen/function/defaults8.kt");
            }

            @Test
            @TestMetadata("defaults9.kt")
            public void testDefaults9() throws Exception {
                runTest("native/native.tests/testData/codegen/function/defaults9.kt");
            }

            @Test
            @TestMetadata("defaultsFromFakeOverride.kt")
            public void testDefaultsFromFakeOverride() throws Exception {
                runTest("native/native.tests/testData/codegen/function/defaultsFromFakeOverride.kt");
            }

            @Test
            @TestMetadata("defaultsWithInlineClasses.kt")
            public void testDefaultsWithInlineClasses() throws Exception {
                runTest("native/native.tests/testData/codegen/function/defaultsWithInlineClasses.kt");
            }

            @Test
            @TestMetadata("defaultsWithVarArg1.kt")
            public void testDefaultsWithVarArg1() throws Exception {
                runTest("native/native.tests/testData/codegen/function/defaultsWithVarArg1.kt");
            }

            @Test
            @TestMetadata("defaultsWithVarArg2.kt")
            public void testDefaultsWithVarArg2() throws Exception {
                runTest("native/native.tests/testData/codegen/function/defaultsWithVarArg2.kt");
            }

            @Test
            @TestMetadata("eqeq.kt")
            public void testEqeq() throws Exception {
                runTest("native/native.tests/testData/codegen/function/eqeq.kt");
            }

            @Test
            @TestMetadata("extension.kt")
            public void testExtension() throws Exception {
                runTest("native/native.tests/testData/codegen/function/extension.kt");
            }

            @Test
            @TestMetadata("intrinsic.kt")
            public void testIntrinsic() throws Exception {
                runTest("native/native.tests/testData/codegen/function/intrinsic.kt");
            }

            @Test
            @TestMetadata("localFunction.kt")
            public void testLocalFunction() throws Exception {
                runTest("native/native.tests/testData/codegen/function/localFunction.kt");
            }

            @Test
            @TestMetadata("localFunction2.kt")
            public void testLocalFunction2() throws Exception {
                runTest("native/native.tests/testData/codegen/function/localFunction2.kt");
            }

            @Test
            @TestMetadata("localFunction3.kt")
            public void testLocalFunction3() throws Exception {
                runTest("native/native.tests/testData/codegen/function/localFunction3.kt");
            }

            @Test
            @TestMetadata("minus_eq.kt")
            public void testMinus_eq() throws Exception {
                runTest("native/native.tests/testData/codegen/function/minus_eq.kt");
            }

            @Test
            @TestMetadata("named.kt")
            public void testNamed() throws Exception {
                runTest("native/native.tests/testData/codegen/function/named.kt");
            }

            @Test
            @TestMetadata("nothingNReturningSafeCall.kt")
            public void testNothingNReturningSafeCall() throws Exception {
                runTest("native/native.tests/testData/codegen/function/nothingNReturningSafeCall.kt");
            }

            @Test
            @TestMetadata("plus_eq.kt")
            public void testPlus_eq() throws Exception {
                runTest("native/native.tests/testData/codegen/function/plus_eq.kt");
            }

            @Test
            @TestMetadata("referenceBigArity.kt")
            public void testReferenceBigArity() throws Exception {
                runTest("native/native.tests/testData/codegen/function/referenceBigArity.kt");
            }

            @Test
            @TestMetadata("sum.kt")
            public void testSum() throws Exception {
                runTest("native/native.tests/testData/codegen/function/sum.kt");
            }

            @Test
            @TestMetadata("sum_3const.kt")
            public void testSum_3const() throws Exception {
                runTest("native/native.tests/testData/codegen/function/sum_3const.kt");
            }

            @Test
            @TestMetadata("sum_foo_bar.kt")
            public void testSum_foo_bar() throws Exception {
                runTest("native/native.tests/testData/codegen/function/sum_foo_bar.kt");
            }

            @Test
            @TestMetadata("sum_func.kt")
            public void testSum_func() throws Exception {
                runTest("native/native.tests/testData/codegen/function/sum_func.kt");
            }

            @Test
            @TestMetadata("sum_imm.kt")
            public void testSum_imm() throws Exception {
                runTest("native/native.tests/testData/codegen/function/sum_imm.kt");
            }

            @Test
            @TestMetadata("sum_mixed.kt")
            public void testSum_mixed() throws Exception {
                runTest("native/native.tests/testData/codegen/function/sum_mixed.kt");
            }

            @Test
            @TestMetadata("sum_silly.kt")
            public void testSum_silly() throws Exception {
                runTest("native/native.tests/testData/codegen/function/sum_silly.kt");
            }

            @Test
            @TestMetadata("unreachableStatementAfterReturn.kt")
            public void testUnreachableStatementAfterReturn() throws Exception {
                runTest("native/native.tests/testData/codegen/function/unreachableStatementAfterReturn.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/initializers")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Initializers {
            @Test
            public void testAllFilesPresentInInitializers() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/initializers"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("correctOrder1.kt")
            public void testCorrectOrder1() throws Exception {
                runTest("native/native.tests/testData/codegen/initializers/correctOrder1.kt");
            }

            @Test
            @TestMetadata("correctOrder2.kt")
            public void testCorrectOrder2() throws Exception {
                runTest("native/native.tests/testData/codegen/initializers/correctOrder2.kt");
            }

            @Test
            @TestMetadata("correctOrder3.kt")
            public void testCorrectOrder3() throws Exception {
                runTest("native/native.tests/testData/codegen/initializers/correctOrder3.kt");
            }

            @Test
            @TestMetadata("eagerInitializationGlobal1.kt")
            public void testEagerInitializationGlobal1() throws Exception {
                runTest("native/native.tests/testData/codegen/initializers/eagerInitializationGlobal1.kt");
            }

            @Test
            @TestMetadata("eagerInitializationGlobal2.kt")
            public void testEagerInitializationGlobal2() throws Exception {
                runTest("native/native.tests/testData/codegen/initializers/eagerInitializationGlobal2.kt");
            }

            @Test
            @TestMetadata("eagerInitializationThreadLocal1.kt")
            public void testEagerInitializationThreadLocal1() throws Exception {
                runTest("native/native.tests/testData/codegen/initializers/eagerInitializationThreadLocal1.kt");
            }

            @Test
            @TestMetadata("eagerInitializationThreadLocal2.kt")
            public void testEagerInitializationThreadLocal2() throws Exception {
                runTest("native/native.tests/testData/codegen/initializers/eagerInitializationThreadLocal2.kt");
            }

            @Test
            @TestMetadata("globalInitedAfterAccessingFile.kt")
            public void testGlobalInitedAfterAccessingFile() throws Exception {
                runTest("native/native.tests/testData/codegen/initializers/globalInitedAfterAccessingFile.kt");
            }

            @Test
            @TestMetadata("globalInitedBeforeThreadLocal.kt")
            public void testGlobalInitedBeforeThreadLocal() throws Exception {
                runTest("native/native.tests/testData/codegen/initializers/globalInitedBeforeThreadLocal.kt");
            }

            @Test
            @TestMetadata("globalNotInitedAfterAccessingClassInternals.kt")
            public void testGlobalNotInitedAfterAccessingClassInternals() throws Exception {
                runTest("native/native.tests/testData/codegen/initializers/globalNotInitedAfterAccessingClassInternals.kt");
            }

            @Test
            @TestMetadata("object.kt")
            public void testObject() throws Exception {
                runTest("native/native.tests/testData/codegen/initializers/object.kt");
            }

            @Test
            @TestMetadata("return1.kt")
            public void testReturn1() throws Exception {
                runTest("native/native.tests/testData/codegen/initializers/return1.kt");
            }

            @Test
            @TestMetadata("return2.kt")
            public void testReturn2() throws Exception {
                runTest("native/native.tests/testData/codegen/initializers/return2.kt");
            }

            @Test
            @TestMetadata("static.kt")
            public void testStatic() throws Exception {
                runTest("native/native.tests/testData/codegen/initializers/static.kt");
            }

            @Test
            @TestMetadata("throw1.kt")
            public void testThrow1() throws Exception {
                runTest("native/native.tests/testData/codegen/initializers/throw1.kt");
            }

            @Test
            @TestMetadata("throw2.kt")
            public void testThrow2() throws Exception {
                runTest("native/native.tests/testData/codegen/initializers/throw2.kt");
            }

            @Test
            @TestMetadata("when1.kt")
            public void testWhen1() throws Exception {
                runTest("native/native.tests/testData/codegen/initializers/when1.kt");
            }

            @Test
            @TestMetadata("when2.kt")
            public void testWhen2() throws Exception {
                runTest("native/native.tests/testData/codegen/initializers/when2.kt");
            }

            @Test
            @TestMetadata("while1.kt")
            public void testWhile1() throws Exception {
                runTest("native/native.tests/testData/codegen/initializers/while1.kt");
            }

            @Test
            @TestMetadata("while2.kt")
            public void testWhile2() throws Exception {
                runTest("native/native.tests/testData/codegen/initializers/while2.kt");
            }

            @Test
            @TestMetadata("while3.kt")
            public void testWhile3() throws Exception {
                runTest("native/native.tests/testData/codegen/initializers/while3.kt");
            }

            @Test
            @TestMetadata("workers1.kt")
            public void testWorkers1() throws Exception {
                runTest("native/native.tests/testData/codegen/initializers/workers1.kt");
            }

            @Test
            @TestMetadata("workers2.kt")
            public void testWorkers2() throws Exception {
                runTest("native/native.tests/testData/codegen/initializers/workers2.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/inline")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Inline {
            @Test
            public void testAllFilesPresentInInline() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/inline"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("changingCapturedLocal.kt")
            public void testChangingCapturedLocal() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/changingCapturedLocal.kt");
            }

            @Test
            @TestMetadata("classDeclarationInsideInline.kt")
            public void testClassDeclarationInsideInline() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/classDeclarationInsideInline.kt");
            }

            @Test
            @TestMetadata("coercionToUnit.kt")
            public void testCoercionToUnit() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/coercionToUnit.kt");
            }

            @Test
            @TestMetadata("correctOrderFunctionReference.kt")
            public void testCorrectOrderFunctionReference() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/correctOrderFunctionReference.kt");
            }

            @Test
            @TestMetadata("defaultArgs.kt")
            public void testDefaultArgs() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/defaultArgs.kt");
            }

            @Test
            @TestMetadata("genericFunctionReference.kt")
            public void testGenericFunctionReference() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/genericFunctionReference.kt");
            }

            @Test
            @TestMetadata("getClass.kt")
            public void testGetClass() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/getClass.kt");
            }

            @Test
            @TestMetadata("inline0.kt")
            public void testInline0() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline0.kt");
            }

            @Test
            @TestMetadata("inline1.kt")
            public void testInline1() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline1.kt");
            }

            @Test
            @TestMetadata("inline10.kt")
            public void testInline10() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline10.kt");
            }

            @Test
            @TestMetadata("inline11.kt")
            public void testInline11() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline11.kt");
            }

            @Test
            @TestMetadata("inline12.kt")
            public void testInline12() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline12.kt");
            }

            @Test
            @TestMetadata("inline13.kt")
            public void testInline13() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline13.kt");
            }

            @Test
            @TestMetadata("inline14.kt")
            public void testInline14() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline14.kt");
            }

            @Test
            @TestMetadata("inline15.kt")
            public void testInline15() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline15.kt");
            }

            @Test
            @TestMetadata("inline16.kt")
            public void testInline16() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline16.kt");
            }

            @Test
            @TestMetadata("inline17.kt")
            public void testInline17() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline17.kt");
            }

            @Test
            @TestMetadata("inline18.kt")
            public void testInline18() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline18.kt");
            }

            @Test
            @TestMetadata("inline19.kt")
            public void testInline19() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline19.kt");
            }

            @Test
            @TestMetadata("inline2.kt")
            public void testInline2() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline2.kt");
            }

            @Test
            @TestMetadata("inline20.kt")
            public void testInline20() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline20.kt");
            }

            @Test
            @TestMetadata("inline21.kt")
            public void testInline21() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline21.kt");
            }

            @Test
            @TestMetadata("inline22.kt")
            public void testInline22() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline22.kt");
            }

            @Test
            @TestMetadata("inline23.kt")
            public void testInline23() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline23.kt");
            }

            @Test
            @TestMetadata("inline24.kt")
            public void testInline24() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline24.kt");
            }

            @Test
            @TestMetadata("inline25.kt")
            public void testInline25() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline25.kt");
            }

            @Test
            @TestMetadata("inline26.kt")
            public void testInline26() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline26.kt");
            }

            @Test
            @TestMetadata("inline3.kt")
            public void testInline3() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline3.kt");
            }

            @Test
            @TestMetadata("inline4.kt")
            public void testInline4() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline4.kt");
            }

            @Test
            @TestMetadata("inline5.kt")
            public void testInline5() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline5.kt");
            }

            @Test
            @TestMetadata("inline6.kt")
            public void testInline6() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline6.kt");
            }

            @Test
            @TestMetadata("inline7.kt")
            public void testInline7() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline7.kt");
            }

            @Test
            @TestMetadata("inline8.kt")
            public void testInline8() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline8.kt");
            }

            @Test
            @TestMetadata("inline9.kt")
            public void testInline9() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/inline9.kt");
            }

            @Test
            @TestMetadata("lambdaAsAny.kt")
            public void testLambdaAsAny() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/lambdaAsAny.kt");
            }

            @Test
            @TestMetadata("lambdaInDefaultValue.kt")
            public void testLambdaInDefaultValue() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/lambdaInDefaultValue.kt");
            }

            @Test
            @TestMetadata("localFunctionInInitializerBlock.kt")
            public void testLocalFunctionInInitializerBlock() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/localFunctionInInitializerBlock.kt");
            }

            @Test
            @TestMetadata("localObjectReturnedFromWhen.kt")
            public void testLocalObjectReturnedFromWhen() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/localObjectReturnedFromWhen.kt");
            }

            @Test
            @TestMetadata("propertyAccessorInline.kt")
            public void testPropertyAccessorInline() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/propertyAccessorInline.kt");
            }

            @Test
            @TestMetadata("redundantCoercionsCleaner.kt")
            public void testRedundantCoercionsCleaner() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/redundantCoercionsCleaner.kt");
            }

            @Test
            @TestMetadata("returnLocalClassFromBlock.kt")
            public void testReturnLocalClassFromBlock() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/returnLocalClassFromBlock.kt");
            }

            @Test
            @TestMetadata("statementAsLastExprInBlock.kt")
            public void testStatementAsLastExprInBlock() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/statementAsLastExprInBlock.kt");
            }

            @Test
            @TestMetadata("twiceInlinedObject.kt")
            public void testTwiceInlinedObject() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/twiceInlinedObject.kt");
            }

            @Test
            @TestMetadata("typeSubstitutionInFakeOverride.kt")
            public void testTypeSubstitutionInFakeOverride() throws Exception {
                runTest("native/native.tests/testData/codegen/inline/typeSubstitutionInFakeOverride.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/inlineClass")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class InlineClass {
            @Test
            public void testAllFilesPresentInInlineClass() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/inlineClass"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("customEquals.kt")
            public void testCustomEquals() throws Exception {
                runTest("native/native.tests/testData/codegen/inlineClass/customEquals.kt");
            }

            @Test
            @TestMetadata("defaultEquals.kt")
            public void testDefaultEquals() throws Exception {
                runTest("native/native.tests/testData/codegen/inlineClass/defaultEquals.kt");
            }

            @Test
            @TestMetadata("inlineClass0.kt")
            public void testInlineClass0() throws Exception {
                runTest("native/native.tests/testData/codegen/inlineClass/inlineClass0.kt");
            }

            @Test
            @TestMetadata("nestedInlineClasses.kt")
            public void testNestedInlineClasses() throws Exception {
                runTest("native/native.tests/testData/codegen/inlineClass/nestedInlineClasses.kt");
            }

            @Test
            @TestMetadata("secondaryConstructorWithGenerics.kt")
            public void testSecondaryConstructorWithGenerics() throws Exception {
                runTest("native/native.tests/testData/codegen/inlineClass/secondaryConstructorWithGenerics.kt");
            }

            @Test
            @TestMetadata("valueClass0.kt")
            public void testValueClass0() throws Exception {
                runTest("native/native.tests/testData/codegen/inlineClass/valueClass0.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/innerClass")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class InnerClass {
            @Test
            public void testAllFilesPresentInInnerClass() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/innerClass"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("doubleInner.kt")
            public void testDoubleInner() throws Exception {
                runTest("native/native.tests/testData/codegen/innerClass/doubleInner.kt");
            }

            @Test
            @TestMetadata("generic.kt")
            public void testGeneric() throws Exception {
                runTest("native/native.tests/testData/codegen/innerClass/generic.kt");
            }

            @Test
            @TestMetadata("getOuterVal.kt")
            public void testGetOuterVal() throws Exception {
                runTest("native/native.tests/testData/codegen/innerClass/getOuterVal.kt");
            }

            @Test
            @TestMetadata("noPrimaryConstructor.kt")
            public void testNoPrimaryConstructor() throws Exception {
                runTest("native/native.tests/testData/codegen/innerClass/noPrimaryConstructor.kt");
            }

            @Test
            @TestMetadata("qualifiedThis.kt")
            public void testQualifiedThis() throws Exception {
                runTest("native/native.tests/testData/codegen/innerClass/qualifiedThis.kt");
            }

            @Test
            @TestMetadata("secondaryConstructor.kt")
            public void testSecondaryConstructor() throws Exception {
                runTest("native/native.tests/testData/codegen/innerClass/secondaryConstructor.kt");
            }

            @Test
            @TestMetadata("simple.kt")
            public void testSimple() throws Exception {
                runTest("native/native.tests/testData/codegen/innerClass/simple.kt");
            }

            @Test
            @TestMetadata("superOuter.kt")
            public void testSuperOuter() throws Exception {
                runTest("native/native.tests/testData/codegen/innerClass/superOuter.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/interfaceCallsNCasts")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class InterfaceCallsNCasts {
            @Test
            public void testAllFilesPresentInInterfaceCallsNCasts() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/interfaceCallsNCasts"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("conservativeItable.kt")
            public void testConservativeItable() throws Exception {
                runTest("native/native.tests/testData/codegen/interfaceCallsNCasts/conservativeItable.kt");
            }

            @Test
            @TestMetadata("diamond.kt")
            public void testDiamond() throws Exception {
                runTest("native/native.tests/testData/codegen/interfaceCallsNCasts/diamond.kt");
            }

            @Test
            @TestMetadata("finalMethod.kt")
            public void testFinalMethod() throws Exception {
                runTest("native/native.tests/testData/codegen/interfaceCallsNCasts/finalMethod.kt");
            }

            @Test
            @TestMetadata("functionNameClash.kt")
            public void testFunctionNameClash() throws Exception {
                runTest("native/native.tests/testData/codegen/interfaceCallsNCasts/functionNameClash.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/intrinsics")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Intrinsics {
            @Test
            public void testAllFilesPresentInIntrinsics() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/intrinsics"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("interop_convert.kt")
            public void testInterop_convert() throws Exception {
                runTest("native/native.tests/testData/codegen/intrinsics/interop_convert.kt");
            }

            @Test
            @TestMetadata("interop_sourceCodeStruct.kt")
            public void testInterop_sourceCodeStruct() throws Exception {
                runTest("native/native.tests/testData/codegen/intrinsics/interop_sourceCodeStruct.kt");
            }

            @Test
            @TestMetadata("isExperimentalMM.kt")
            public void testIsExperimentalMM() throws Exception {
                runTest("native/native.tests/testData/codegen/intrinsics/isExperimentalMM.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/kclass")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Kclass {
            @Test
            public void testAllFilesPresentInKclass() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/kclass"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("kClassEnumArgument.kt")
            public void testKClassEnumArgument() throws Exception {
                runTest("native/native.tests/testData/codegen/kclass/kClassEnumArgument.kt");
            }

            @Test
            @TestMetadata("kclass0.kt")
            public void testKclass0() throws Exception {
                runTest("native/native.tests/testData/codegen/kclass/kclass0.kt");
            }

            @Test
            @TestMetadata("kclass1.kt")
            public void testKclass1() throws Exception {
                runTest("native/native.tests/testData/codegen/kclass/kclass1.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/ktype")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Ktype {
            @Test
            public void testAllFilesPresentInKtype() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/ktype"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("ktype1.kt")
            public void testKtype1() throws Exception {
                runTest("native/native.tests/testData/codegen/ktype/ktype1.kt");
            }

            @Test
            @TestMetadata("nonReified.kt")
            public void testNonReified() throws Exception {
                runTest("native/native.tests/testData/codegen/ktype/nonReified.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/lambda")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Lambda {
            @Test
            public void testAllFilesPresentInLambda() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/lambda"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("lambda1.kt")
            public void testLambda1() throws Exception {
                runTest("native/native.tests/testData/codegen/lambda/lambda1.kt");
            }

            @Test
            @TestMetadata("lambda10.kt")
            public void testLambda10() throws Exception {
                runTest("native/native.tests/testData/codegen/lambda/lambda10.kt");
            }

            @Test
            @TestMetadata("lambda11.kt")
            public void testLambda11() throws Exception {
                runTest("native/native.tests/testData/codegen/lambda/lambda11.kt");
            }

            @Test
            @TestMetadata("lambda12.kt")
            public void testLambda12() throws Exception {
                runTest("native/native.tests/testData/codegen/lambda/lambda12.kt");
            }

            @Test
            @TestMetadata("lambda13.kt")
            public void testLambda13() throws Exception {
                runTest("native/native.tests/testData/codegen/lambda/lambda13.kt");
            }

            @Test
            @TestMetadata("lambda14.kt")
            public void testLambda14() throws Exception {
                runTest("native/native.tests/testData/codegen/lambda/lambda14.kt");
            }

            @Test
            @TestMetadata("lambda2.kt")
            public void testLambda2() throws Exception {
                runTest("native/native.tests/testData/codegen/lambda/lambda2.kt");
            }

            @Test
            @TestMetadata("lambda3.kt")
            public void testLambda3() throws Exception {
                runTest("native/native.tests/testData/codegen/lambda/lambda3.kt");
            }

            @Test
            @TestMetadata("lambda4.kt")
            public void testLambda4() throws Exception {
                runTest("native/native.tests/testData/codegen/lambda/lambda4.kt");
            }

            @Test
            @TestMetadata("lambda5.kt")
            public void testLambda5() throws Exception {
                runTest("native/native.tests/testData/codegen/lambda/lambda5.kt");
            }

            @Test
            @TestMetadata("lambda6.kt")
            public void testLambda6() throws Exception {
                runTest("native/native.tests/testData/codegen/lambda/lambda6.kt");
            }

            @Test
            @TestMetadata("lambda7.kt")
            public void testLambda7() throws Exception {
                runTest("native/native.tests/testData/codegen/lambda/lambda7.kt");
            }

            @Test
            @TestMetadata("lambda8.kt")
            public void testLambda8() throws Exception {
                runTest("native/native.tests/testData/codegen/lambda/lambda8.kt");
            }

            @Test
            @TestMetadata("lambda9.kt")
            public void testLambda9() throws Exception {
                runTest("native/native.tests/testData/codegen/lambda/lambda9.kt");
            }

            @Test
            @TestMetadata("lambda_kt49360.kt")
            public void testLambda_kt49360() throws Exception {
                runTest("native/native.tests/testData/codegen/lambda/lambda_kt49360.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/lateinit")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Lateinit {
            @Test
            public void testAllFilesPresentInLateinit() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/lateinit"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("globalIsInitialized.kt")
            public void testGlobalIsInitialized() throws Exception {
                runTest("native/native.tests/testData/codegen/lateinit/globalIsInitialized.kt");
            }

            @Test
            @TestMetadata("inBaseClass.kt")
            public void testInBaseClass() throws Exception {
                runTest("native/native.tests/testData/codegen/lateinit/inBaseClass.kt");
            }

            @Test
            @TestMetadata("initialized.kt")
            public void testInitialized() throws Exception {
                runTest("native/native.tests/testData/codegen/lateinit/initialized.kt");
            }

            @Test
            @TestMetadata("innerIsInitialized.kt")
            public void testInnerIsInitialized() throws Exception {
                runTest("native/native.tests/testData/codegen/lateinit/innerIsInitialized.kt");
            }

            @Test
            @TestMetadata("isInitialized.kt")
            public void testIsInitialized() throws Exception {
                runTest("native/native.tests/testData/codegen/lateinit/isInitialized.kt");
            }

            @Test
            @TestMetadata("localCapturedInitialized.kt")
            public void testLocalCapturedInitialized() throws Exception {
                runTest("native/native.tests/testData/codegen/lateinit/localCapturedInitialized.kt");
            }

            @Test
            @TestMetadata("localCapturedNotInitialized.kt")
            public void testLocalCapturedNotInitialized() throws Exception {
                runTest("native/native.tests/testData/codegen/lateinit/localCapturedNotInitialized.kt");
            }

            @Test
            @TestMetadata("localInitialized.kt")
            public void testLocalInitialized() throws Exception {
                runTest("native/native.tests/testData/codegen/lateinit/localInitialized.kt");
            }

            @Test
            @TestMetadata("localNotInitialized.kt")
            public void testLocalNotInitialized() throws Exception {
                runTest("native/native.tests/testData/codegen/lateinit/localNotInitialized.kt");
            }

            @Test
            @TestMetadata("notInitialized.kt")
            public void testNotInitialized() throws Exception {
                runTest("native/native.tests/testData/codegen/lateinit/notInitialized.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/localClass")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class LocalClass {
            @Test
            public void testAllFilesPresentInLocalClass() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/localClass"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("innerTakesCapturedFromOuter.kt")
            public void testInnerTakesCapturedFromOuter() throws Exception {
                runTest("native/native.tests/testData/codegen/localClass/innerTakesCapturedFromOuter.kt");
            }

            @Test
            @TestMetadata("innerWithCapture.kt")
            public void testInnerWithCapture() throws Exception {
                runTest("native/native.tests/testData/codegen/localClass/innerWithCapture.kt");
            }

            @Test
            @TestMetadata("localFunctionCallFromLocalClass.kt")
            public void testLocalFunctionCallFromLocalClass() throws Exception {
                runTest("native/native.tests/testData/codegen/localClass/localFunctionCallFromLocalClass.kt");
            }

            @Test
            @TestMetadata("localFunctionInLocalClass.kt")
            public void testLocalFunctionInLocalClass() throws Exception {
                runTest("native/native.tests/testData/codegen/localClass/localFunctionInLocalClass.kt");
            }

            @Test
            @TestMetadata("localHierarchy.kt")
            public void testLocalHierarchy() throws Exception {
                runTest("native/native.tests/testData/codegen/localClass/localHierarchy.kt");
            }

            @Test
            @TestMetadata("noPrimaryConstructor.kt")
            public void testNoPrimaryConstructor() throws Exception {
                runTest("native/native.tests/testData/codegen/localClass/noPrimaryConstructor.kt");
            }

            @Test
            @TestMetadata("objectExpressionInInitializer.kt")
            public void testObjectExpressionInInitializer() throws Exception {
                runTest("native/native.tests/testData/codegen/localClass/objectExpressionInInitializer.kt");
            }

            @Test
            @TestMetadata("objectExpressionInProperty.kt")
            public void testObjectExpressionInProperty() throws Exception {
                runTest("native/native.tests/testData/codegen/localClass/objectExpressionInProperty.kt");
            }

            @Test
            @TestMetadata("tryCatch.kt")
            public void testTryCatch() throws Exception {
                runTest("native/native.tests/testData/codegen/localClass/tryCatch.kt");
            }

            @Test
            @TestMetadata("virtualCallFromConstructor.kt")
            public void testVirtualCallFromConstructor() throws Exception {
                runTest("native/native.tests/testData/codegen/localClass/virtualCallFromConstructor.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/localEscapeAnalysis")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class LocalEscapeAnalysis {
            @Test
            public void testAllFilesPresentInLocalEscapeAnalysis() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/localEscapeAnalysis"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("arraysFieldWrite.kt")
            public void testArraysFieldWrite() throws Exception {
                runTest("native/native.tests/testData/codegen/localEscapeAnalysis/arraysFieldWrite.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/object")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Object {
            @Test
            public void testAllFilesPresentInObject() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/object"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("constructor.kt")
            public void testConstructor() throws Exception {
                runTest("native/native.tests/testData/codegen/object/constructor.kt");
            }

            @Test
            @TestMetadata("constructor0.kt")
            public void testConstructor0() throws Exception {
                runTest("native/native.tests/testData/codegen/object/constructor0.kt");
            }

            @Test
            @TestMetadata("fields.kt")
            public void testFields() throws Exception {
                runTest("native/native.tests/testData/codegen/object/fields.kt");
            }

            @Test
            @TestMetadata("fields1.kt")
            public void testFields1() throws Exception {
                runTest("native/native.tests/testData/codegen/object/fields1.kt");
            }

            @Test
            @TestMetadata("fields2.kt")
            public void testFields2() throws Exception {
                runTest("native/native.tests/testData/codegen/object/fields2.kt");
            }

            @Test
            @TestMetadata("globalInitializer.kt")
            public void testGlobalInitializer() throws Exception {
                runTest("native/native.tests/testData/codegen/object/globalInitializer.kt");
            }

            @Test
            @TestMetadata("init0.kt")
            public void testInit0() throws Exception {
                runTest("native/native.tests/testData/codegen/object/init0.kt");
            }

            @Test
            @TestMetadata("initialization.kt")
            public void testInitialization() throws Exception {
                runTest("native/native.tests/testData/codegen/object/initialization.kt");
            }

            @Test
            @TestMetadata("initialization1.kt")
            public void testInitialization1() throws Exception {
                runTest("native/native.tests/testData/codegen/object/initialization1.kt");
            }

            @Test
            @TestMetadata("method_call.kt")
            public void testMethod_call() throws Exception {
                runTest("native/native.tests/testData/codegen/object/method_call.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/objectDeclaration")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class ObjectDeclaration {
            @Test
            public void testAllFilesPresentInObjectDeclaration() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/objectDeclaration"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("globalConstants.kt")
            public void testGlobalConstants() throws Exception {
                runTest("native/native.tests/testData/codegen/objectDeclaration/globalConstants.kt");
            }

            @Test
            @TestMetadata("isFrozen.kt")
            public void testIsFrozen() throws Exception {
                runTest("native/native.tests/testData/codegen/objectDeclaration/isFrozen.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/objectExpression")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class ObjectExpression {
            @Test
            public void testAllFilesPresentInObjectExpression() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/objectExpression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("expr1.kt")
            public void testExpr1() throws Exception {
                runTest("native/native.tests/testData/codegen/objectExpression/expr1.kt");
            }

            @Test
            @TestMetadata("expr2.kt")
            public void testExpr2() throws Exception {
                runTest("native/native.tests/testData/codegen/objectExpression/expr2.kt");
            }

            @Test
            @TestMetadata("expr3.kt")
            public void testExpr3() throws Exception {
                runTest("native/native.tests/testData/codegen/objectExpression/expr3.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/propertyCallableReference")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class PropertyCallableReference {
            @Test
            public void testAllFilesPresentInPropertyCallableReference() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/propertyCallableReference"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("dynamicReceiver.kt")
            public void testDynamicReceiver() throws Exception {
                runTest("native/native.tests/testData/codegen/propertyCallableReference/dynamicReceiver.kt");
            }

            @Test
            @TestMetadata("valClass.kt")
            public void testValClass() throws Exception {
                runTest("native/native.tests/testData/codegen/propertyCallableReference/valClass.kt");
            }

            @Test
            @TestMetadata("valExtension.kt")
            public void testValExtension() throws Exception {
                runTest("native/native.tests/testData/codegen/propertyCallableReference/valExtension.kt");
            }

            @Test
            @TestMetadata("valModule.kt")
            public void testValModule() throws Exception {
                runTest("native/native.tests/testData/codegen/propertyCallableReference/valModule.kt");
            }

            @Test
            @TestMetadata("varClass.kt")
            public void testVarClass() throws Exception {
                runTest("native/native.tests/testData/codegen/propertyCallableReference/varClass.kt");
            }

            @Test
            @TestMetadata("varExtension.kt")
            public void testVarExtension() throws Exception {
                runTest("native/native.tests/testData/codegen/propertyCallableReference/varExtension.kt");
            }

            @Test
            @TestMetadata("varModule.kt")
            public void testVarModule() throws Exception {
                runTest("native/native.tests/testData/codegen/propertyCallableReference/varModule.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/stringTrim")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class StringTrim {
            @Test
            public void testAllFilesPresentInStringTrim() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/stringTrim"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("stringTrim.kt")
            public void testStringTrim() throws Exception {
                runTest("native/native.tests/testData/codegen/stringTrim/stringTrim.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/try")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Try {
            @Test
            public void testAllFilesPresentInTry() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/try"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("catch3.kt")
            public void testCatch3() throws Exception {
                runTest("native/native.tests/testData/codegen/try/catch3.kt");
            }

            @Test
            @TestMetadata("catch4.kt")
            public void testCatch4() throws Exception {
                runTest("native/native.tests/testData/codegen/try/catch4.kt");
            }

            @Test
            @TestMetadata("catch5.kt")
            public void testCatch5() throws Exception {
                runTest("native/native.tests/testData/codegen/try/catch5.kt");
            }

            @Test
            @TestMetadata("catch6.kt")
            public void testCatch6() throws Exception {
                runTest("native/native.tests/testData/codegen/try/catch6.kt");
            }

            @Test
            @TestMetadata("catch8.kt")
            public void testCatch8() throws Exception {
                runTest("native/native.tests/testData/codegen/try/catch8.kt");
            }

            @Test
            @TestMetadata("finally1.kt")
            public void testFinally1() throws Exception {
                runTest("native/native.tests/testData/codegen/try/finally1.kt");
            }

            @Test
            @TestMetadata("finally10.kt")
            public void testFinally10() throws Exception {
                runTest("native/native.tests/testData/codegen/try/finally10.kt");
            }

            @Test
            @TestMetadata("finally11.kt")
            public void testFinally11() throws Exception {
                runTest("native/native.tests/testData/codegen/try/finally11.kt");
            }

            @Test
            @TestMetadata("finally2.kt")
            public void testFinally2() throws Exception {
                runTest("native/native.tests/testData/codegen/try/finally2.kt");
            }

            @Test
            @TestMetadata("finally3.kt")
            public void testFinally3() throws Exception {
                runTest("native/native.tests/testData/codegen/try/finally3.kt");
            }

            @Test
            @TestMetadata("finally4.kt")
            public void testFinally4() throws Exception {
                runTest("native/native.tests/testData/codegen/try/finally4.kt");
            }

            @Test
            @TestMetadata("finally5.kt")
            public void testFinally5() throws Exception {
                runTest("native/native.tests/testData/codegen/try/finally5.kt");
            }

            @Test
            @TestMetadata("finally6.kt")
            public void testFinally6() throws Exception {
                runTest("native/native.tests/testData/codegen/try/finally6.kt");
            }

            @Test
            @TestMetadata("finally7.kt")
            public void testFinally7() throws Exception {
                runTest("native/native.tests/testData/codegen/try/finally7.kt");
            }

            @Test
            @TestMetadata("finally8.kt")
            public void testFinally8() throws Exception {
                runTest("native/native.tests/testData/codegen/try/finally8.kt");
            }

            @Test
            @TestMetadata("finally9.kt")
            public void testFinally9() throws Exception {
                runTest("native/native.tests/testData/codegen/try/finally9.kt");
            }

            @Test
            @TestMetadata("returnsDifferentTypes.kt")
            public void testReturnsDifferentTypes() throws Exception {
                runTest("native/native.tests/testData/codegen/try/returnsDifferentTypes.kt");
            }

            @Test
            @TestMetadata("try1.kt")
            public void testTry1() throws Exception {
                runTest("native/native.tests/testData/codegen/try/try1.kt");
            }

            @Test
            @TestMetadata("try2.kt")
            public void testTry2() throws Exception {
                runTest("native/native.tests/testData/codegen/try/try2.kt");
            }

            @Test
            @TestMetadata("try3.kt")
            public void testTry3() throws Exception {
                runTest("native/native.tests/testData/codegen/try/try3.kt");
            }

            @Test
            @TestMetadata("try4.kt")
            public void testTry4() throws Exception {
                runTest("native/native.tests/testData/codegen/try/try4.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/codegen/vector")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Vector {
            @Test
            public void testAllFilesPresentInVector() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/codegen/vector"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("default_argument.kt")
            public void testDefault_argument() throws Exception {
                runTest("native/native.tests/testData/codegen/vector/default_argument.kt");
            }
        }
    }

    @Nested
    @TestMetadata("native/native.tests/testData/datagen")
    @TestDataPath("$PROJECT_ROOT")
    @UseExtTestCaseGroupProvider()
    public class Datagen {
        @Test
        public void testAllFilesPresentInDatagen() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/datagen"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
        }

        @Nested
        @TestMetadata("native/native.tests/testData/datagen/literals")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Literals {
            @Test
            public void testAllFilesPresentInLiterals() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/datagen/literals"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("empty_string.kt")
            public void testEmpty_string() throws Exception {
                runTest("native/native.tests/testData/datagen/literals/empty_string.kt");
            }

            @Test
            @TestMetadata("listof1.kt")
            public void testListof1() throws Exception {
                runTest("native/native.tests/testData/datagen/literals/listof1.kt");
            }

            @Test
            @TestMetadata("strdedup1.kt")
            public void testStrdedup1() throws Exception {
                runTest("native/native.tests/testData/datagen/literals/strdedup1.kt");
            }

            @Test
            @TestMetadata("strdedup2.kt")
            public void testStrdedup2() throws Exception {
                runTest("native/native.tests/testData/datagen/literals/strdedup2.kt");
            }
        }

        @Nested
        @TestMetadata("native/native.tests/testData/datagen/rtti")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Rtti {
            @Test
            @TestMetadata("abstract_super.kt")
            public void testAbstract_super() throws Exception {
                runTest("native/native.tests/testData/datagen/rtti/abstract_super.kt");
            }

            @Test
            public void testAllFilesPresentInRtti() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/datagen/rtti"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("vtable1.kt")
            public void testVtable1() throws Exception {
                runTest("native/native.tests/testData/datagen/rtti/vtable1.kt");
            }

            @Test
            @TestMetadata("vtable_any.kt")
            public void testVtable_any() throws Exception {
                runTest("native/native.tests/testData/datagen/rtti/vtable_any.kt");
            }
        }
    }

    @Nested
    @TestMetadata("native/native.tests/testData/lower")
    @TestDataPath("$PROJECT_ROOT")
    @UseExtTestCaseGroupProvider()
    public class Lower {
        @Test
        public void testAllFilesPresentInLower() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/lower"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
        }

        @Test
        @TestMetadata("immutable_blob_in_lambda.kt")
        public void testImmutable_blob_in_lambda() throws Exception {
            runTest("native/native.tests/testData/lower/immutable_blob_in_lambda.kt");
        }

        @Test
        @TestMetadata("tailrec.kt")
        public void testTailrec() throws Exception {
            runTest("native/native.tests/testData/lower/tailrec.kt");
        }

        @Test
        @TestMetadata("vararg.kt")
        public void testVararg() throws Exception {
            runTest("native/native.tests/testData/lower/vararg.kt");
        }

        @Test
        @TestMetadata("vararg_of_literals.kt")
        public void testVararg_of_literals() throws Exception {
            runTest("native/native.tests/testData/lower/vararg_of_literals.kt");
        }
    }

    @Nested
    @TestMetadata("native/native.tests/testData/serialization")
    @TestDataPath("$PROJECT_ROOT")
    @UseExtTestCaseGroupProvider()
    public class Serialization {
        @Test
        public void testAllFilesPresentInSerialization() throws Exception {
            KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/serialization"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
        }

        @Test
        @TestMetadata("deserialized_fields.kt")
        public void testDeserialized_fields() throws Exception {
            runTest("native/native.tests/testData/serialization/deserialized_fields.kt");
        }

        @Test
        @TestMetadata("deserialized_inline0.kt")
        public void testDeserialized_inline0() throws Exception {
            runTest("native/native.tests/testData/serialization/deserialized_inline0.kt");
        }

        @Test
        @TestMetadata("deserialized_listof0.kt")
        public void testDeserialized_listof0() throws Exception {
            runTest("native/native.tests/testData/serialization/deserialized_listof0.kt");
        }

        @Nested
        @TestMetadata("native/native.tests/testData/serialization/regression")
        @TestDataPath("$PROJECT_ROOT")
        @UseExtTestCaseGroupProvider()
        public class Regression {
            @Test
            public void testAllFilesPresentInRegression() throws Exception {
                KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("native/native.tests/testData/serialization/regression"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.NATIVE, true);
            }

            @Test
            @TestMetadata("no_type_map.kt")
            public void testNo_type_map() throws Exception {
                runTest("native/native.tests/testData/serialization/regression/no_type_map.kt");
            }
        }
    }
}
